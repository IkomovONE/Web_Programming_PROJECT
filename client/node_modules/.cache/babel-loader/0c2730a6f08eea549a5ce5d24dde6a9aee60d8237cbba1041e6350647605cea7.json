{"ast":null,"code":"/*\nSyntax highlighting with language autodetection.\nhttp://softwaremaniacs.org/soft/highlight/\n*/\n\nvar hljs = module.exports.hljs = new function () {\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/gm, '&amp;').replace(/</gm, '&lt;');\n  }\n  function langRe(language, value, global) {\n    return RegExp(value, 'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : ''));\n  }\n  function findCode(pre) {\n    for (var i = 0; i < pre.childNodes.length; i++) {\n      var node = pre.childNodes[i];\n      if (node.nodeName == 'CODE') return node;\n      if (!(node.nodeType == 3 && node.nodeValue.match(/\\s+/))) break;\n    }\n  }\n  function blockText(block, ignoreNewLines) {\n    var result = '';\n    for (var i = 0; i < block.childNodes.length; i++) if (block.childNodes[i].nodeType == 3) {\n      var chunk = block.childNodes[i].nodeValue;\n      if (ignoreNewLines) chunk = chunk.replace(/\\n/g, '');\n      result += chunk;\n    } else if (block.childNodes[i].nodeName == 'BR') result += '\\n';else result += blockText(block.childNodes[i]);\n    // Thank you, MSIE...\n    if (/MSIE [678]/.test(navigator.userAgent)) result = result.replace(/\\r/g, '\\n');\n    return result;\n  }\n  function blockLanguage(block) {\n    var classes = block.className.split(/\\s+/);\n    classes = classes.concat(block.parentNode.className.split(/\\s+/));\n    for (var i = 0; i < classes.length; i++) {\n      var class_ = classes[i].replace(/^language-/, '');\n      if (languages[class_] || class_ == 'no-highlight') {\n        return class_;\n      }\n    }\n  }\n\n  /* Stream merging */\n\n  function nodeStream(node) {\n    var result = [];\n    (function (node, offset) {\n      for (var i = 0; i < node.childNodes.length; i++) {\n        if (node.childNodes[i].nodeType == 3) offset += node.childNodes[i].nodeValue.length;else if (node.childNodes[i].nodeName == 'BR') offset += 1;else {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: node.childNodes[i]\n          });\n          offset = arguments.callee(node.childNodes[i], offset);\n          result.push({\n            event: 'stop',\n            offset: offset,\n            node: node.childNodes[i]\n          });\n        }\n      }\n      return offset;\n    })(node, 0);\n    return result;\n  }\n  function mergeStreams(stream1, stream2, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n    function selectStream() {\n      if (stream1.length && stream2.length) {\n        if (stream1[0].offset != stream2[0].offset) return stream1[0].offset < stream2[0].offset ? stream1 : stream2;else {\n          /*\n          To avoid starting the stream just before it should stop the order is\n          ensured that stream1 always starts first and closes last:\n           if (event1 == 'start' && event2 == 'start')\n            return stream1;\n          if (event1 == 'start' && event2 == 'stop')\n            return stream2;\n          if (event1 == 'stop' && event2 == 'start')\n            return stream1;\n          if (event1 == 'stop' && event2 == 'stop')\n            return stream2;\n           ... which is collapsed to:\n          */\n          return stream2[0].event == 'start' ? stream1 : stream2;\n        }\n      } else {\n        return stream1.length ? stream1 : stream2;\n      }\n    }\n    function open(node) {\n      var result = '<' + node.nodeName.toLowerCase();\n      for (var i = 0; i < node.attributes.length; i++) {\n        var attribute = node.attributes[i];\n        result += ' ' + attribute.nodeName.toLowerCase();\n        if (attribute.nodeValue != undefined) {\n          result += '=\"' + escape(attribute.nodeValue) + '\"';\n        }\n      }\n      return result + '>';\n    }\n    while (stream1.length || stream2.length) {\n      var current = selectStream().splice(0, 1)[0];\n      result += escape(value.substr(processed, current.offset - processed));\n      processed = current.offset;\n      if (current.event == 'start') {\n        result += open(current.node);\n        nodeStack.push(current.node);\n      } else if (current.event == 'stop') {\n        var i = nodeStack.length;\n        do {\n          i--;\n          var node = nodeStack[i];\n          result += '</' + node.nodeName.toLowerCase() + '>';\n        } while (node != current.node);\n        nodeStack.splice(i, 1);\n        while (i < nodeStack.length) {\n          result += open(nodeStack[i]);\n          i++;\n        }\n      }\n    }\n    result += value.substr(processed);\n    return result;\n  }\n\n  /* Core highlighting function */\n\n  function highlight(language_name, value) {\n    function subMode(lexem, mode) {\n      for (var i = 0; i < mode.contains.length; i++) {\n        if (mode.contains[i].beginRe.test(lexem)) {\n          return mode.contains[i];\n        }\n      }\n    }\n    function endOfMode(mode_index, lexem) {\n      if (modes[mode_index].end && modes[mode_index].endRe.test(lexem)) return 1;\n      if (modes[mode_index].endsWithParent) {\n        var level = endOfMode(mode_index - 1, lexem);\n        return level ? level + 1 : 0;\n      }\n      return 0;\n    }\n    function isIllegal(lexem, mode) {\n      return mode.illegalRe && mode.illegalRe.test(lexem);\n    }\n    function compileTerminators(mode, language) {\n      var terminators = [];\n      for (var i = 0; i < mode.contains.length; i++) {\n        terminators.push(mode.contains[i].begin);\n      }\n      var index = modes.length - 1;\n      do {\n        if (modes[index].end) {\n          terminators.push(modes[index].end);\n        }\n        index--;\n      } while (modes[index + 1].endsWithParent);\n      if (mode.illegal) {\n        terminators.push(mode.illegal);\n      }\n      return langRe(language, '(' + terminators.join('|') + ')', true);\n    }\n    function eatModeChunk(value, index) {\n      var mode = modes[modes.length - 1];\n      if (!mode.terminators) {\n        mode.terminators = compileTerminators(mode, language);\n      }\n      mode.terminators.lastIndex = index;\n      var match = mode.terminators.exec(value);\n      if (match) return [value.substr(index, match.index - index), match[0], false];else return [value.substr(index), '', true];\n    }\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0];\n      for (var className in mode.keywordGroups) {\n        if (!mode.keywordGroups.hasOwnProperty(className)) continue;\n        var value = mode.keywordGroups[className].hasOwnProperty(match_str);\n        if (value) return [className, value];\n      }\n      return false;\n    }\n    function processKeywords(buffer, mode) {\n      if (!mode.keywords) return escape(buffer);\n      var result = '';\n      var last_index = 0;\n      mode.lexemsRe.lastIndex = 0;\n      var match = mode.lexemsRe.exec(buffer);\n      while (match) {\n        result += escape(buffer.substr(last_index, match.index - last_index));\n        var keyword_match = keywordMatch(mode, match);\n        if (keyword_match) {\n          keyword_count += keyword_match[1];\n          result += '<span class=\"' + keyword_match[0] + '\">' + escape(match[0]) + '</span>';\n        } else {\n          result += escape(match[0]);\n        }\n        last_index = mode.lexemsRe.lastIndex;\n        match = mode.lexemsRe.exec(buffer);\n      }\n      result += escape(buffer.substr(last_index, buffer.length - last_index));\n      return result;\n    }\n    function processBuffer(buffer, mode) {\n      if (mode.subLanguage && languages[mode.subLanguage]) {\n        var result = highlight(mode.subLanguage, buffer);\n        keyword_count += result.keyword_count;\n        return result.value;\n      } else {\n        return processKeywords(buffer, mode);\n      }\n    }\n    function startNewMode(mode, lexem) {\n      var markup = mode.className ? '<span class=\"' + mode.className + '\">' : '';\n      if (mode.returnBegin) {\n        result += markup;\n        mode.buffer = '';\n      } else if (mode.excludeBegin) {\n        result += escape(lexem) + markup;\n        mode.buffer = '';\n      } else {\n        result += markup;\n        mode.buffer = lexem;\n      }\n      modes.push(mode);\n      relevance += mode.relevance;\n    }\n    function processModeInfo(buffer, lexem, end) {\n      var current_mode = modes[modes.length - 1];\n      if (end) {\n        result += processBuffer(current_mode.buffer + buffer, current_mode);\n        return false;\n      }\n      var new_mode = subMode(lexem, current_mode);\n      if (new_mode) {\n        result += processBuffer(current_mode.buffer + buffer, current_mode);\n        startNewMode(new_mode, lexem);\n        return new_mode.returnBegin;\n      }\n      var end_level = endOfMode(modes.length - 1, lexem);\n      if (end_level) {\n        var markup = current_mode.className ? '</span>' : '';\n        if (current_mode.returnEnd) {\n          result += processBuffer(current_mode.buffer + buffer, current_mode) + markup;\n        } else if (current_mode.excludeEnd) {\n          result += processBuffer(current_mode.buffer + buffer, current_mode) + markup + escape(lexem);\n        } else {\n          result += processBuffer(current_mode.buffer + buffer + lexem, current_mode) + markup;\n        }\n        while (end_level > 1) {\n          markup = modes[modes.length - 2].className ? '</span>' : '';\n          result += markup;\n          end_level--;\n          modes.length--;\n        }\n        var last_ended_mode = modes[modes.length - 1];\n        modes.length--;\n        modes[modes.length - 1].buffer = '';\n        if (last_ended_mode.starts) {\n          startNewMode(last_ended_mode.starts, '');\n        }\n        return current_mode.returnEnd;\n      }\n      if (isIllegal(lexem, current_mode)) throw 'Illegal';\n    }\n    var language = languages[language_name];\n    var modes = [language.defaultMode];\n    var relevance = 0;\n    var keyword_count = 0;\n    var result = '';\n    try {\n      var index = 0;\n      language.defaultMode.buffer = '';\n      do {\n        var mode_info = eatModeChunk(value, index);\n        var return_lexem = processModeInfo(mode_info[0], mode_info[1], mode_info[2]);\n        index += mode_info[0].length;\n        if (!return_lexem) {\n          index += mode_info[1].length;\n        }\n      } while (!mode_info[2]);\n      if (modes.length > 1) throw 'Illegal';\n      return {\n        language: language_name,\n        relevance: relevance,\n        keyword_count: keyword_count,\n        value: result\n      };\n    } catch (e) {\n      if (e == 'Illegal') {\n        return {\n          language: null,\n          relevance: 0,\n          keyword_count: 0,\n          value: escape(value)\n        };\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /* Initialization */\n\n  function compileModes() {\n    function compileMode(mode, language, is_default) {\n      if (mode.compiled) return;\n      if (!is_default) {\n        mode.beginRe = langRe(language, mode.begin ? mode.begin : '\\\\B|\\\\b');\n        if (!mode.end && !mode.endsWithParent) mode.end = '\\\\B|\\\\b';\n        if (mode.end) mode.endRe = langRe(language, mode.end);\n      }\n      if (mode.illegal) mode.illegalRe = langRe(language, mode.illegal);\n      if (mode.relevance == undefined) mode.relevance = 1;\n      if (mode.keywords) mode.lexemsRe = langRe(language, mode.lexems || hljs.IDENT_RE, true);\n      for (var key in mode.keywords) {\n        if (!mode.keywords.hasOwnProperty(key)) continue;\n        if (mode.keywords[key] instanceof Object) mode.keywordGroups = mode.keywords;else mode.keywordGroups = {\n          'keyword': mode.keywords\n        };\n        break;\n      }\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n      // compiled flag is set before compiling submodes to avoid self-recursion\n      // (see lisp where quoted_list contains quoted_list)\n      mode.compiled = true;\n      for (var i = 0; i < mode.contains.length; i++) {\n        compileMode(mode.contains[i], language, false);\n      }\n      if (mode.starts) {\n        compileMode(mode.starts, language, false);\n      }\n    }\n    for (var i in languages) {\n      if (!languages.hasOwnProperty(i)) continue;\n      compileMode(languages[i].defaultMode, languages[i], true);\n    }\n  }\n  function initialize() {\n    if (initialize.called) return;\n    initialize.called = true;\n    compileModes();\n  }\n\n  /* Public library functions */\n\n  function highlightBlock(block, tabReplace, useBR) {\n    initialize();\n    var text = blockText(block, useBR);\n    var language = blockLanguage(block);\n    if (language == 'no-highlight') return;\n    if (language) {\n      var result = highlight(language, text);\n    } else {\n      var result = {\n        language: '',\n        keyword_count: 0,\n        relevance: 0,\n        value: escape(text)\n      };\n      var second_best = result;\n      for (var key in languages) {\n        if (!languages.hasOwnProperty(key)) continue;\n        var current = highlight(key, text);\n        if (current.keyword_count + current.relevance > second_best.keyword_count + second_best.relevance) {\n          second_best = current;\n        }\n        if (current.keyword_count + current.relevance > result.keyword_count + result.relevance) {\n          second_best = result;\n          result = current;\n        }\n      }\n    }\n    var class_name = block.className;\n    if (!class_name.match(result.language)) {\n      class_name = class_name ? class_name + ' ' + result.language : result.language;\n    }\n    var original = nodeStream(block);\n    if (original.length) {\n      var pre = document.createElement('pre');\n      pre.innerHTML = result.value;\n      result.value = mergeStreams(original, nodeStream(pre), text);\n    }\n    if (tabReplace) {\n      result.value = result.value.replace(/^((<[^>]+>|\\t)+)/gm, function (match, p1, offset, s) {\n        return p1.replace(/\\t/g, tabReplace);\n      });\n    }\n    if (useBR) {\n      result.value = result.value.replace(/\\n/g, '<br>');\n    }\n    if (/MSIE [678]/.test(navigator.userAgent) && block.tagName == 'CODE' && block.parentNode.tagName == 'PRE') {\n      // This is for backwards compatibility only. IE needs this strange\n      // hack becasue it cannot just cleanly replace <code> block contents.\n      var pre = block.parentNode;\n      var container = document.createElement('div');\n      container.innerHTML = '<pre><code>' + result.value + '</code></pre>';\n      block = container.firstChild.firstChild;\n      container.firstChild.className = pre.className;\n      pre.parentNode.replaceChild(container.firstChild, pre);\n    } else {\n      block.innerHTML = result.value;\n    }\n    block.className = class_name;\n    block.dataset = {};\n    block.dataset.result = {\n      language: result.language,\n      kw: result.keyword_count,\n      re: result.relevance\n    };\n    if (second_best && second_best.language) {\n      block.dataset.second_best = {\n        language: second_best.language,\n        kw: second_best.keyword_count,\n        re: second_best.relevance\n      };\n    }\n  }\n  function highlightText(block, tabReplace, useBR) {\n    initialize();\n    var text = block;\n    var language;\n    var result = {\n      language: '',\n      keyword_count: 0,\n      relevance: 0,\n      value: escape(text)\n    };\n    var second_best = result;\n    for (var key in languages) {\n      if (!languages.hasOwnProperty(key)) continue;\n      var current = highlight(key, text);\n      if (current.keyword_count + current.relevance > second_best.keyword_count + second_best.relevance) {\n        second_best = current;\n      }\n      if (current.keyword_count + current.relevance > result.keyword_count + result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    }\n    if (tabReplace) {\n      result.value = result.value.replace(/^((<[^>]+>|\\t)+)/gm, function (match, p1, offset, s) {\n        return p1.replace(/\\t/g, tabReplace);\n      });\n    }\n    if (useBR) {\n      result.value = result.value.replace(/\\n/g, '<br>');\n    }\n    return result.value;\n  }\n  function initHighlighting() {\n    if (initHighlighting.called) return;\n    initHighlighting.called = true;\n    initialize();\n    var pres = document.getElementsByTagName('pre');\n    for (var i = 0; i < pres.length; i++) {\n      var code = findCode(pres[i]);\n      if (code) highlightBlock(code, hljs.tabReplace);\n    }\n  }\n  function initHighlightingOnLoad() {\n    var original_arguments = arguments;\n    var handler = function () {\n      initHighlighting.apply(null, original_arguments);\n    };\n    if (window.addEventListener) {\n      window.addEventListener('DOMContentLoaded', handler, false);\n      window.addEventListener('load', handler, false);\n    } else if (window.attachEvent) window.attachEvent('onload', handler);else window.onload = handler;\n  }\n  var languages = {}; // a shortcut to avoid writing \"this.\" everywhere\n\n  /* Interface definition */\n\n  this.LANGUAGES = languages;\n  this.initHighlightingOnLoad = initHighlightingOnLoad;\n  this.highlightBlock = highlightBlock;\n  this.initHighlighting = initHighlighting;\n  this.highlightText = highlightText;\n\n  // Common regexps\n  this.IDENT_RE = '[a-zA-Z][a-zA-Z0-9_]*';\n  this.UNDERSCORE_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*';\n  this.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  this.C_NUMBER_RE = '\\\\b(0x[A-Za-z0-9]+|\\\\d+(\\\\.\\\\d+)?)';\n  this.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|\\\\.|-|-=|/|/=|:|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n  // Common modes\n  this.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\.',\n    relevance: 0\n  };\n  this.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'',\n    end: '\\'',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"',\n    end: '\"',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.C_LINE_COMMENT_MODE = {\n    className: 'comment',\n    begin: '//',\n    end: '$'\n  };\n  this.C_BLOCK_COMMENT_MODE = {\n    className: 'comment',\n    begin: '/\\\\*',\n    end: '\\\\*/'\n  };\n  this.HASH_COMMENT_MODE = {\n    className: 'comment',\n    begin: '#',\n    end: '$'\n  };\n  this.NUMBER_MODE = {\n    className: 'number',\n    begin: this.NUMBER_RE,\n    relevance: 0\n  };\n  this.C_NUMBER_MODE = {\n    className: 'number',\n    begin: this.C_NUMBER_RE,\n    relevance: 0\n  };\n\n  // Utility functions\n  this.inherit = function (parent, obj) {\n    var result = {};\n    for (var key in parent) result[key] = parent[key];\n    if (obj) for (var key in obj) result[key] = obj[key];\n    return result;\n  };\n}();","map":{"version":3,"names":["hljs","module","exports","escape","value","replace","langRe","language","global","RegExp","case_insensitive","findCode","pre","i","childNodes","length","node","nodeName","nodeType","nodeValue","match","blockText","block","ignoreNewLines","result","chunk","test","navigator","userAgent","blockLanguage","classes","className","split","concat","parentNode","class_","languages","nodeStream","offset","push","event","arguments","callee","mergeStreams","stream1","stream2","processed","nodeStack","selectStream","open","toLowerCase","attributes","attribute","undefined","current","splice","substr","highlight","language_name","subMode","lexem","mode","contains","beginRe","endOfMode","mode_index","modes","end","endRe","endsWithParent","level","isIllegal","illegalRe","compileTerminators","terminators","begin","index","illegal","join","eatModeChunk","lastIndex","exec","keywordMatch","match_str","keywordGroups","hasOwnProperty","processKeywords","buffer","keywords","last_index","lexemsRe","keyword_match","keyword_count","processBuffer","subLanguage","startNewMode","markup","returnBegin","excludeBegin","relevance","processModeInfo","current_mode","new_mode","end_level","returnEnd","excludeEnd","last_ended_mode","starts","defaultMode","mode_info","return_lexem","e","compileModes","compileMode","is_default","compiled","lexems","IDENT_RE","key","Object","initialize","called","highlightBlock","tabReplace","useBR","text","second_best","class_name","original","document","createElement","innerHTML","p1","s","tagName","container","firstChild","replaceChild","dataset","kw","re","highlightText","initHighlighting","pres","getElementsByTagName","code","initHighlightingOnLoad","original_arguments","handler","apply","window","addEventListener","attachEvent","onload","LANGUAGES","UNDERSCORE_IDENT_RE","NUMBER_RE","C_NUMBER_RE","RE_STARTERS_RE","BACKSLASH_ESCAPE","APOS_STRING_MODE","QUOTE_STRING_MODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","HASH_COMMENT_MODE","NUMBER_MODE","C_NUMBER_MODE","inherit","parent","obj"],"sources":["/Users/ikomovone/Desktop/Web_programming_PROJECT/client/node_modules/highlight/lib/vendor/highlight.js/highlight.js"],"sourcesContent":["/*\nSyntax highlighting with language autodetection.\nhttp://softwaremaniacs.org/soft/highlight/\n*/\n\nvar hljs = module.exports.hljs = new function() {\n\n  /* Utility functions */\n\n  function escape(value) {\n    return value.replace(/&/gm, '&amp;').replace(/</gm, '&lt;');\n  }\n\n  function langRe(language, value, global) {\n    return RegExp(\n      value,\n      'm' + (language.case_insensitive ? 'i' : '') + (global ? 'g' : '')\n    );\n  }\n\n  function findCode(pre) {\n    for (var i = 0; i < pre.childNodes.length; i++) {\n      var node = pre.childNodes[i];\n      if (node.nodeName == 'CODE')\n        return node;\n      if (!(node.nodeType == 3 && node.nodeValue.match(/\\s+/)))\n        break;\n    }\n  }\n\n  function blockText(block, ignoreNewLines) {\n    var result = '';\n    for (var i = 0; i < block.childNodes.length; i++)\n      if (block.childNodes[i].nodeType == 3) {\n        var chunk = block.childNodes[i].nodeValue;\n        if (ignoreNewLines)\n          chunk = chunk.replace(/\\n/g, '');\n        result += chunk;\n      } else if (block.childNodes[i].nodeName == 'BR')\n        result += '\\n';\n      else\n        result += blockText(block.childNodes[i]);\n    // Thank you, MSIE...\n    if (/MSIE [678]/.test(navigator.userAgent))\n      result = result.replace(/\\r/g, '\\n');\n    return result;\n  }\n\n  function blockLanguage(block) {\n    var classes = block.className.split(/\\s+/)\n    classes = classes.concat(block.parentNode.className.split(/\\s+/));\n    for (var i = 0; i < classes.length; i++) {\n      var class_ = classes[i].replace(/^language-/, '');\n      if (languages[class_] || class_ == 'no-highlight') {\n        return class_;\n      }\n    }\n  }\n\n  /* Stream merging */\n\n  function nodeStream(node) {\n    var result = [];\n    (function (node, offset) {\n      for (var i = 0; i < node.childNodes.length; i++) {\n        if (node.childNodes[i].nodeType == 3)\n          offset += node.childNodes[i].nodeValue.length;\n        else if (node.childNodes[i].nodeName == 'BR')\n          offset += 1\n        else {\n          result.push({\n            event: 'start',\n            offset: offset,\n            node: node.childNodes[i]\n          });\n          offset = arguments.callee(node.childNodes[i], offset)\n          result.push({\n            event: 'stop',\n            offset: offset,\n            node: node.childNodes[i]\n          });\n        }\n      }\n      return offset;\n    })(node, 0);\n    return result;\n  }\n\n  function mergeStreams(stream1, stream2, value) {\n    var processed = 0;\n    var result = '';\n    var nodeStack = [];\n\n    function selectStream() {\n      if (stream1.length && stream2.length) {\n        if (stream1[0].offset != stream2[0].offset)\n          return (stream1[0].offset < stream2[0].offset) ? stream1 : stream2;\n        else {\n          /*\n          To avoid starting the stream just before it should stop the order is\n          ensured that stream1 always starts first and closes last:\n\n          if (event1 == 'start' && event2 == 'start')\n            return stream1;\n          if (event1 == 'start' && event2 == 'stop')\n            return stream2;\n          if (event1 == 'stop' && event2 == 'start')\n            return stream1;\n          if (event1 == 'stop' && event2 == 'stop')\n            return stream2;\n\n          ... which is collapsed to:\n          */\n          return stream2[0].event == 'start' ? stream1 : stream2;\n        }\n      } else {\n        return stream1.length ? stream1 : stream2;\n      }\n    }\n\n    function open(node) {\n      var result = '<' + node.nodeName.toLowerCase();\n      for (var i = 0; i < node.attributes.length; i++) {\n        var attribute = node.attributes[i];\n        result += ' ' + attribute.nodeName.toLowerCase();\n        if (attribute.nodeValue != undefined) {\n          result += '=\"' + escape(attribute.nodeValue) + '\"';\n        }\n      }\n      return result + '>';\n    }\n\n    while (stream1.length || stream2.length) {\n      var current = selectStream().splice(0, 1)[0];\n      result += escape(value.substr(processed, current.offset - processed));\n      processed = current.offset;\n      if ( current.event == 'start') {\n        result += open(current.node);\n        nodeStack.push(current.node);\n      } else if (current.event == 'stop') {\n        var i = nodeStack.length;\n        do {\n          i--;\n          var node = nodeStack[i];\n          result += ('</' + node.nodeName.toLowerCase() + '>');\n        } while (node != current.node);\n        nodeStack.splice(i, 1);\n        while (i < nodeStack.length) {\n          result += open(nodeStack[i]);\n          i++;\n        }\n      }\n    }\n    result += value.substr(processed);\n    return result;\n  }\n\n  /* Core highlighting function */\n\n  function highlight(language_name, value) {\n\n    function subMode(lexem, mode) {\n      for (var i = 0; i < mode.contains.length; i++) {\n        if (mode.contains[i].beginRe.test(lexem)) {\n          return mode.contains[i];\n        }\n      }\n    }\n\n    function endOfMode(mode_index, lexem) {\n      if (modes[mode_index].end && modes[mode_index].endRe.test(lexem))\n        return 1;\n      if (modes[mode_index].endsWithParent) {\n        var level = endOfMode(mode_index - 1, lexem);\n        return level ? level + 1 : 0;\n      }\n      return 0;\n    }\n\n    function isIllegal(lexem, mode) {\n      return mode.illegalRe && mode.illegalRe.test(lexem);\n    }\n\n    function compileTerminators(mode, language) {\n      var terminators = [];\n\n      for (var i = 0; i < mode.contains.length; i++) {\n        terminators.push(mode.contains[i].begin);\n      }\n\n      var index = modes.length - 1;\n      do {\n        if (modes[index].end) {\n          terminators.push(modes[index].end);\n        }\n        index--;\n      } while (modes[index + 1].endsWithParent);\n\n      if (mode.illegal) {\n        terminators.push(mode.illegal);\n      }\n\n      return langRe(language, '(' + terminators.join('|') + ')', true);\n    }\n\n    function eatModeChunk(value, index) {\n      var mode = modes[modes.length - 1];\n      if (!mode.terminators) {\n        mode.terminators = compileTerminators(mode, language);\n      }\n      mode.terminators.lastIndex = index;\n      var match = mode.terminators.exec(value);\n      if (match)\n        return [value.substr(index, match.index - index), match[0], false];\n      else\n        return [value.substr(index), '', true];\n    }\n\n    function keywordMatch(mode, match) {\n      var match_str = language.case_insensitive ? match[0].toLowerCase() : match[0]\n      for (var className in mode.keywordGroups) {\n        if (!mode.keywordGroups.hasOwnProperty(className))\n          continue;\n        var value = mode.keywordGroups[className].hasOwnProperty(match_str);\n        if (value)\n          return [className, value];\n      }\n      return false;\n    }\n\n    function processKeywords(buffer, mode) {\n      if (!mode.keywords)\n        return escape(buffer);\n      var result = '';\n      var last_index = 0;\n      mode.lexemsRe.lastIndex = 0;\n      var match = mode.lexemsRe.exec(buffer);\n      while (match) {\n        result += escape(buffer.substr(last_index, match.index - last_index));\n        var keyword_match = keywordMatch(mode, match);\n        if (keyword_match) {\n          keyword_count += keyword_match[1];\n          result += '<span class=\"'+ keyword_match[0] +'\">' + escape(match[0]) + '</span>';\n        } else {\n          result += escape(match[0]);\n        }\n        last_index = mode.lexemsRe.lastIndex;\n        match = mode.lexemsRe.exec(buffer);\n      }\n      result += escape(buffer.substr(last_index, buffer.length - last_index));\n      return result;\n    }\n\n    function processBuffer(buffer, mode) {\n      if (mode.subLanguage && languages[mode.subLanguage]) {\n        var result = highlight(mode.subLanguage, buffer);\n        keyword_count += result.keyword_count;\n        return result.value;\n      } else {\n        return processKeywords(buffer, mode);\n      }\n    }\n\n    function startNewMode(mode, lexem) {\n      var markup = mode.className?'<span class=\"' + mode.className + '\">':'';\n      if (mode.returnBegin) {\n        result += markup;\n        mode.buffer = '';\n      } else if (mode.excludeBegin) {\n        result += escape(lexem) + markup;\n        mode.buffer = '';\n      } else {\n        result += markup;\n        mode.buffer = lexem;\n      }\n      modes.push(mode);\n      relevance += mode.relevance;\n    }\n\n    function processModeInfo(buffer, lexem, end) {\n      var current_mode = modes[modes.length - 1];\n      if (end) {\n        result += processBuffer(current_mode.buffer + buffer, current_mode);\n        return false;\n      }\n\n      var new_mode = subMode(lexem, current_mode);\n      if (new_mode) {\n        result += processBuffer(current_mode.buffer + buffer, current_mode);\n        startNewMode(new_mode, lexem);\n        return new_mode.returnBegin;\n      }\n\n      var end_level = endOfMode(modes.length - 1, lexem);\n      if (end_level) {\n        var markup = current_mode.className?'</span>':'';\n        if (current_mode.returnEnd) {\n          result += processBuffer(current_mode.buffer + buffer, current_mode) + markup;\n        } else if (current_mode.excludeEnd) {\n          result += processBuffer(current_mode.buffer + buffer, current_mode) + markup + escape(lexem);\n        } else {\n          result += processBuffer(current_mode.buffer + buffer + lexem, current_mode) + markup;\n        }\n        while (end_level > 1) {\n          markup = modes[modes.length - 2].className?'</span>':'';\n          result += markup;\n          end_level--;\n          modes.length--;\n        }\n        var last_ended_mode = modes[modes.length - 1];\n        modes.length--;\n        modes[modes.length - 1].buffer = '';\n        if (last_ended_mode.starts) {\n          startNewMode(last_ended_mode.starts, '');\n        }\n        return current_mode.returnEnd;\n      }\n\n      if (isIllegal(lexem, current_mode))\n        throw 'Illegal';\n    }\n\n    var language = languages[language_name];\n    var modes = [language.defaultMode];\n    var relevance = 0;\n    var keyword_count = 0;\n    var result = '';\n    try {\n      var index = 0;\n      language.defaultMode.buffer = '';\n      do {\n        var mode_info = eatModeChunk(value, index);\n        var return_lexem = processModeInfo(mode_info[0], mode_info[1], mode_info[2]);\n        index += mode_info[0].length;\n        if (!return_lexem) {\n          index += mode_info[1].length;\n        }\n      } while (!mode_info[2]);\n      if(modes.length > 1)\n        throw 'Illegal';\n      return {\n        language: language_name,\n        relevance: relevance,\n        keyword_count: keyword_count,\n        value: result\n      }\n    } catch (e) {\n      if (e == 'Illegal') {\n        return {\n          language: null,\n          relevance: 0,\n          keyword_count: 0,\n          value: escape(value)\n        }\n      } else {\n        throw e;\n      }\n    }\n  }\n\n  /* Initialization */\n\n  function compileModes() {\n\n    function compileMode(mode, language, is_default) {\n      if (mode.compiled)\n        return;\n\n      if (!is_default) {\n        mode.beginRe = langRe(language, mode.begin ? mode.begin : '\\\\B|\\\\b');\n        if (!mode.end && !mode.endsWithParent)\n          mode.end = '\\\\B|\\\\b'\n        if (mode.end)\n          mode.endRe = langRe(language, mode.end);\n      }\n      if (mode.illegal)\n        mode.illegalRe = langRe(language, mode.illegal);\n      if (mode.relevance == undefined)\n        mode.relevance = 1;\n      if (mode.keywords)\n        mode.lexemsRe = langRe(language, mode.lexems || hljs.IDENT_RE, true);\n      for (var key in mode.keywords) {\n        if (!mode.keywords.hasOwnProperty(key))\n          continue;\n        if (mode.keywords[key] instanceof Object)\n          mode.keywordGroups = mode.keywords;\n        else\n          mode.keywordGroups = {'keyword': mode.keywords};\n        break;\n      }\n      if (!mode.contains) {\n        mode.contains = [];\n      }\n      // compiled flag is set before compiling submodes to avoid self-recursion\n      // (see lisp where quoted_list contains quoted_list)\n      mode.compiled = true;\n      for (var i = 0; i < mode.contains.length; i++) {\n        compileMode(mode.contains[i], language, false);\n      }\n      if (mode.starts) {\n        compileMode(mode.starts, language, false);\n      }\n    }\n\n    for (var i in languages) {\n      if (!languages.hasOwnProperty(i))\n        continue;\n      compileMode(languages[i].defaultMode, languages[i], true);\n    }\n  }\n\n  function initialize() {\n    if (initialize.called)\n        return;\n    initialize.called = true;\n    compileModes();\n  }\n\n  /* Public library functions */\n\n  function highlightBlock(block, tabReplace, useBR) {\n    initialize();\n\n    var text = blockText(block, useBR);\n    var language = blockLanguage(block);\n    if (language == 'no-highlight')\n        return;\n    if (language) {\n      var result = highlight(language, text);\n    } else {\n      var result = {language: '', keyword_count: 0, relevance: 0, value: escape(text)};\n      var second_best = result;\n      for (var key in languages) {\n        if (!languages.hasOwnProperty(key))\n          continue;\n        var current = highlight(key, text);\n        if (current.keyword_count + current.relevance > second_best.keyword_count + second_best.relevance) {\n          second_best = current;\n        }\n        if (current.keyword_count + current.relevance > result.keyword_count + result.relevance) {\n          second_best = result;\n          result = current;\n        }\n      }\n    }\n\n    var class_name = block.className;\n    if (!class_name.match(result.language)) {\n      class_name = class_name ? (class_name + ' ' + result.language) : result.language;\n    }\n    var original = nodeStream(block);\n    if (original.length) {\n      var pre = document.createElement('pre');\n      pre.innerHTML = result.value;\n      result.value = mergeStreams(original, nodeStream(pre), text);\n    }\n    if (tabReplace) {\n      result.value = result.value.replace(/^((<[^>]+>|\\t)+)/gm, function(match, p1, offset, s) {\n        return p1.replace(/\\t/g, tabReplace);\n      })\n    }\n    if (useBR) {\n      result.value = result.value.replace(/\\n/g, '<br>');\n    }\n    if (/MSIE [678]/.test(navigator.userAgent) && block.tagName == 'CODE' && block.parentNode.tagName == 'PRE') {\n      // This is for backwards compatibility only. IE needs this strange\n      // hack becasue it cannot just cleanly replace <code> block contents.\n      var pre = block.parentNode;\n      var container = document.createElement('div');\n      container.innerHTML = '<pre><code>' + result.value + '</code></pre>';\n      block = container.firstChild.firstChild;\n      container.firstChild.className = pre.className;\n      pre.parentNode.replaceChild(container.firstChild, pre);\n    } else {\n      block.innerHTML = result.value;\n    }\n    block.className = class_name;\n    block.dataset = {};\n    block.dataset.result = {\n      language: result.language,\n      kw: result.keyword_count,\n      re: result.relevance\n    };\n    if (second_best && second_best.language) {\n      block.dataset.second_best = {\n        language: second_best.language,\n        kw: second_best.keyword_count,\n        re: second_best.relevance\n      };\n    }\n  }\n  \n  function highlightText(block, tabReplace, useBR) {\n    initialize();\n\n    var text = block;\n    var language;\n    \n    var result = {language: '', keyword_count: 0, relevance: 0, value: escape(text)};\n    var second_best = result;\n    for (var key in languages) {\n      if (!languages.hasOwnProperty(key))\n        continue;\n      var current = highlight(key, text);\n      if (current.keyword_count + current.relevance > second_best.keyword_count + second_best.relevance) {\n        second_best = current;\n      }\n      if (current.keyword_count + current.relevance > result.keyword_count + result.relevance) {\n        second_best = result;\n        result = current;\n      }\n    }\n\n    if (tabReplace) {\n      result.value = result.value.replace(/^((<[^>]+>|\\t)+)/gm, function(match, p1, offset, s) {\n        return p1.replace(/\\t/g, tabReplace);\n      })\n    }\n    if (useBR) {\n      result.value = result.value.replace(/\\n/g, '<br>');\n    }\n    return result.value;\n  }\n\n  function initHighlighting() {\n    if (initHighlighting.called)\n      return;\n    initHighlighting.called = true;\n    initialize();\n    var pres = document.getElementsByTagName('pre');\n    for (var i = 0; i < pres.length; i++) {\n      var code = findCode(pres[i]);\n      if (code)\n        highlightBlock(code, hljs.tabReplace);\n    }\n  }\n\n  function initHighlightingOnLoad() {\n    var original_arguments = arguments;\n    var handler = function(){initHighlighting.apply(null, original_arguments)};\n    if (window.addEventListener) {\n      window.addEventListener('DOMContentLoaded', handler, false);\n      window.addEventListener('load', handler, false);\n    } else if (window.attachEvent)\n      window.attachEvent('onload', handler);\n    else\n      window.onload = handler;\n  }\n\n  var languages = {}; // a shortcut to avoid writing \"this.\" everywhere\n\n  /* Interface definition */\n\n  this.LANGUAGES = languages;\n  this.initHighlightingOnLoad = initHighlightingOnLoad;\n  this.highlightBlock = highlightBlock;\n  this.initHighlighting = initHighlighting;\n  this.highlightText = highlightText;\n\n  // Common regexps\n  this.IDENT_RE = '[a-zA-Z][a-zA-Z0-9_]*';\n  this.UNDERSCORE_IDENT_RE = '[a-zA-Z_][a-zA-Z0-9_]*';\n  this.NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\n  this.C_NUMBER_RE = '\\\\b(0x[A-Za-z0-9]+|\\\\d+(\\\\.\\\\d+)?)';\n  this.RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|\\\\.|-|-=|/|/=|:|;|<|<<|<<=|<=|=|==|===|>|>=|>>|>>=|>>>|>>>=|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n  // Common modes\n  this.BACKSLASH_ESCAPE = {\n    begin: '\\\\\\\\.', relevance: 0\n  };\n  this.APOS_STRING_MODE = {\n    className: 'string',\n    begin: '\\'', end: '\\'',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.QUOTE_STRING_MODE = {\n    className: 'string',\n    begin: '\"', end: '\"',\n    illegal: '\\\\n',\n    contains: [this.BACKSLASH_ESCAPE],\n    relevance: 0\n  };\n  this.C_LINE_COMMENT_MODE = {\n    className: 'comment',\n    begin: '//', end: '$'\n  };\n  this.C_BLOCK_COMMENT_MODE = {\n    className: 'comment',\n    begin: '/\\\\*', end: '\\\\*/'\n  };\n  this.HASH_COMMENT_MODE = {\n    className: 'comment',\n    begin: '#', end: '$'\n  };\n  this.NUMBER_MODE = {\n    className: 'number',\n    begin: this.NUMBER_RE,\n    relevance: 0\n  };\n  this.C_NUMBER_MODE = {\n    className: 'number',\n    begin: this.C_NUMBER_RE,\n    relevance: 0\n  };\n\n  // Utility functions\n  this.inherit = function(parent, obj) {\n    var result = {}\n    for (var key in parent)\n      result[key] = parent[key];\n    if (obj)\n      for (var key in obj)\n        result[key] = obj[key];\n    return result;\n  }\n}();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}